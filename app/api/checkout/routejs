import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', { apiVersion: '2024-06-20' });

export async function POST(req) {
  try {
    const { decantId, fragranceId } = await req.json();
    if (!decantId) return NextResponse.json({ error: 'Missing decantId' }, { status: 400 });

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );

    // Load decant + fragrance for description
    const { data: d, error: dErr } = await supabase
      .from('decants')
      .select('id, fragrance_id, size_ml, price_cents, quantity, is_active, fragrance:fragrances(id, brand, name)')
      .eq('id', decantId)
      .maybeSingle();
    if (dErr || !d) return NextResponse.json({ error: 'Decant not found' }, { status: 404 });
    if (!d.is_active || d.quantity === 0) return NextResponse.json({ error: 'Out of stock' }, { status: 400 });

    const basePrice = d.price_cents;
    const fee = Math.round(basePrice * 0.05); // 5% platform fee
    const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';

    const session = await stripe.checkout.sessions.create({
      mode: 'payment',
      allow_promotion_codes: true,
      line_items: [
        {
          price_data: {
            currency: 'usd',
            product_data: {
              name: `${d.fragrance?.brand || ''} ${d.fragrance?.name || ''} â€” ${d.size_ml} mL decant`
            },
            unit_amount: basePrice
          },
          quantity: 1
        },
        {
          price_data: {
            currency: 'usd',
            product_data: { name: 'Platform fee (5%)' },
            unit_amount: fee
          },
          quantity: 1
        }
      ],
      success_url: `${siteUrl}/fragrance/${d.fragrance_id || fragranceId}?checkout=success`,
      cancel_url: `${siteUrl}/fragrance/${d.fragrance_id || fragranceId}?checkout=cancel`
    });

    return NextResponse.json({ url: session.url });
  } catch (e) {
    return NextResponse.json({ error: e.message || 'checkout error' }, { status: 500 });
  }
}
